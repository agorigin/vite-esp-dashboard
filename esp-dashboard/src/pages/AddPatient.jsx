import { useState } from 'react';
import { db } from '../firebase';
import { collection, addDoc, Timestamp } from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import { v4 as uuidv4 } from 'uuid';

export default function AddPatient() {
  const { profile } = useAuth();
  const [status, setStatus] = useState('');
  const navigate = useNavigate();

  const [form, setForm] = useState({
    name: '',
    age: '',
    gender: 'male',
    bodyPart: '',
    movementType: '',
    mobile: '',
    email: '',
  });

  const patientId = uuidv4().slice(0, 8); // shorter ID for display

  const bodyParts = ['Shoulder', 'Elbow', 'Wrist', 'Hip', 'Knee', 'Ankle'];
  const movementTypes = ['Flexion', 'Extension', 'Abduction', 'Adduction', 'Rotation'];

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const validateEmail = (email) => {
    return /\S+@\S+\.\S+/.test(email);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!form.name || !form.age || !form.bodyPart || !form.movementType || !form.mobile || !form.email) {
      return setStatus('All fields are required.');
    }

    if (isNaN(form.age) || parseInt(form.age) <= 0) {
      return setStatus('Age must be a positive number.');
    }

    if (!validateEmail(form.email)) {
      return setStatus('Invalid email format.');
    }

    if (form.mobile.length < 10 || isNaN(form.mobile)) {
      return setStatus('Invalid mobile number.');
    }

    try {
      await addDoc(collection(db, 'patients'), {
        patientId,
        ...form,
        age: parseInt(form.age),
        hospitalId: profile.hospitalId,
        admittedAt: Timestamp.now(),
        sensorData: { x: 0, y: 0, z: 0 },
      });
      navigate("/",patientId,'/dashboard');
    } catch (err) {
      setStatus('Error: ' + err.message);
    }
  };

  if (!profile?.hospitalId) return <p>You do not have permission to add patients.</p>;

  return (
    <div className="max-w-md mx-auto mt-10 bg-white shadow-md p-6 rounded">
      <h2 className="text-xl font-bold mb-4">Add New Patient</h2>
      <form onSubmit={handleSubmit}>
        {/* Autogenerated ID (disabled) */}
        <input
          className="w-full p-2 mb-4 border rounded bg-gray-100 text-gray-600"
          value={patientId}
          disabled
          title="Autogenerated Patient ID"
        />
        <small className="block mb-4 text-gray-500 italic">Patient ID is autogenerated.</small>

        {/* Name */}
        <input
          className="w-full p-2 mb-4 border rounded"
          name="name"
          value={form.name}
          onChange={handleChange}
          placeholder="Patient Name"
          required
        />

        {/* Age */}
        <input
          className="w-full p-2 mb-4 border rounded"
          name="age"
          type="number"
          value={form.age}
          onChange={handleChange}
          placeholder="Age"
          required
        />

        {/* Gender */}
        <select
          className="w-full p-2 mb-4 border rounded"
          name="gender"
          value={form.gender}
          onChange={handleChange}
        >
          <option value="male">Male</option>
          <option value="female">Female</option>
          <option value="other">Other</option>
        </select>

        {/* Body Part */}
        <select
          className="w-full p-2 mb-4 border rounded"
          name="bodyPart"
          value={form.bodyPart}
          onChange={handleChange}
          required
        >
          <option value="">Select Body Part</option>
          {bodyParts.map((part) => (
            <option key={part} value={part}>
              {part}
            </option>
          ))}
        </select>

        {/* Type of Movement */}
        <select
          className="w-full p-2 mb-4 border rounded"
          name="movementType"
          value={form.movementType}
          onChange={handleChange}
          required
        >
          <option value="">Select Movement Type</option>
          {movementTypes.map((type) => (
            <option key={type} value={type}>
              {type}
            </option>
          ))}
        </select>

        {/* Mobile Number */}
        <input
          className="w-full p-2 mb-4 border rounded"
          name="mobile"
          type="text"
          value={form.mobile}
          onChange={handleChange}
          placeholder="Mobile Number"
          required
        />

        {/* Email */}
        <input
          className="w-full p-2 mb-4 border rounded"
          name="email"
          type="email"
          value={form.email}
          onChange={handleChange}
          placeholder="Gmail Address"
          required
        />

        <button
          type="submit"
          className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
        >
          Add Patient
        </button>
        {status && <p className="mt-4 text-sm text-red-600">{status}</p>}
      </form>
    </div>
  );
}
